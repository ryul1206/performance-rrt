Timer unit: 1e-07 s

Total time: 4.39593 s
File: D:\git\performance-rrt\core\python_impl\rrt_star_pure.py
Function: rrt at line 136

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   136                                           def rrt(params: Params, logger: Logger) -> list[Line2D] | None:
   137                                               # Unpack parameters
   138         1          5.0      5.0      0.0      start: Point2D = params.start_point
   139         1          3.0      3.0      0.0      end: Point2D = params.end_point
   140         1          2.0      2.0      0.0      max_step_size: float = params.max_step_size
   141         1          2.0      2.0      0.0      neighborhood_size: float = params.neighborhood_size
   142         1          2.0      2.0      0.0      max_iter: int | None = params.max_iterations
   143                                           
   144                                               # Obstacles
   145         1         67.0     67.0      0.0      mp = Map(obstacles=params.wall_segments)
   146         1         11.0     11.0      0.0      logger.log_obstacles(mp.obstacles)
   147                                           
   148                                               # Initialize tree
   149         1         30.0     30.0      0.0      tree = RRTTree(start)
   150                                           
   151                                               # Main loop
   152         1          1.0      1.0      0.0      path = None
   153         1          2.0      2.0      0.0      iter = 0  # How many iterations of the algorithm we have done.
   154         1          1.0      1.0      0.0      end_node = None
   155         1          2.0      2.0      0.0      iter_found = None  # Iteration when the path was last found
   156                                           
   157      1369       6055.0      4.4      0.0      while iter_found is None or iter < iter_found * 3:
   158      1368       8012.0      5.9      0.0          random_point = (random.random() * 2, random.random())
   159      1368   17328676.0  12667.2     39.4          closest_node = tree.nearest(random_point)
   160      1368      29717.0     21.7      0.1          new_point = steer(closest_node.pos, random_point, max_step_size)
   161      1368     308308.0    225.4      0.7          intersects_obs = mp.intersects_obstacle(closest_node.pos, new_point)
   162                                           
   163      1368       3705.0      2.7      0.0          iter += 1
   164      1368       3850.0      2.8      0.0          if max_iter is not None and iter >= max_iter:
   165                                                       print("Max iterations reached")
   166                                                       break
   167      1368       9210.0      6.7      0.0          logger.set_time_sequence("iteration", iter)
   168      1368       9310.0      6.8      0.0          logger.log_tree(tree, random_point, closest_node, new_point, intersects_obs)
   169                                           
   170      1368       2675.0      2.0      0.0          if not intersects_obs:
   171                                                       # Searches for the point in a neighborhood that would result in the minimal cost (distance from start).
   172      1186   14790018.0  12470.5     33.6              close_nodes = tree.in_neighborhood(new_point, neighborhood_size)
   173      1186       8644.0      7.3      0.0              logger.log_rewiring(close_nodes, new_point, neighborhood_size)
   174                                           
   175      2372    5724230.0   2413.3     13.0              min_node = min(
   176      2372       6295.0      2.7      0.0                  filter(
   177      1186       4699.0      4.0      0.0                      lambda node: not mp.intersects_obstacle(node.pos, new_point),
   178      1186       5394.0      4.5      0.0                      close_nodes + [closest_node],
   179                                                           ),
   180      1186       3274.0      2.8      0.0                  key=lambda node: node.cost + distance(node.pos, new_point),
   181                                                       )
   182                                           
   183      1186      13432.0     11.3      0.0              cost = distance(min_node.pos, new_point)
   184      1186      18860.0     15.9      0.0              added_node = Node(min_node, new_point, cost + min_node.cost)
   185      1186      12476.0     10.5      0.0              tree.add_node(min_node, added_node)
   186                                           
   187                                                       # (Rewiring) Modifies nearby nodes that would be reached faster by going through `added_node`.
   188     24857      44284.0      1.8      0.1              for node in close_nodes:
   189     23671     274171.0     11.6      0.6                  cost = added_node.cost + distance(added_node.pos, node.pos)
   190     23671    5065964.0    214.0     11.5                  if not mp.intersects_obstacle(new_point, node.pos) and cost < node.cost:
   191      1332       2797.0      2.1      0.0                      parent = node.parent
   192      1332       2410.0      1.8      0.0                      if parent is not None:
   193      1332       7173.0      5.4      0.0                          parent.children.remove(node)
   194      1332       2986.0      2.2      0.0                          node.parent = added_node
   195      1332      73743.0     55.4      0.2                          node.change_cost(cost - node.cost)
   196      1332       4574.0      3.4      0.0                          added_node.children.append(node)
   197                                           
   198      1186      18161.0     15.3      0.0              if distance(new_point, end) < max_step_size and not mp.intersects_obstacle(new_point, end) and end_node is None:
   199         1         21.0     21.0      0.0                  end_node = Node(added_node, end, added_node.cost + distance(new_point, end))
   200         1          8.0      8.0      0.0                  tree.add_node(added_node, end_node)
   201         1          2.0      2.0      0.0                  iter_found = iter
   202                                           
   203      1186       3509.0      3.0      0.0              if end_node:
   204                                                           # Reconstruct shortest path in tree
   205       871      98285.0    112.8      0.2                  path = path_to_root(end_node)
   206       871      57888.0     66.5      0.1                  segments = [(path[i], path[i + 1]) for i in range(len(path) - 1)]
   207       871       6330.0      7.3      0.0                  logger.log_path(segments)
   208                                           
   209         1          2.0      2.0      0.0      return path

