Timer unit: 1e-07 s

Total time: 2.27164 s
File: D:\git\performance-rrt\core\python_impl\rrt_star_numpy_opt.py
Function: rrt at line 182

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   182                                           def rrt(params: Params, logger: Logger) -> list[Line2D] | None:
   183                                               # Unpack parameters
   184         1         92.0     92.0      0.0      start: Point2D = np.array(params.start_point, dtype=np.float64)
   185         1         15.0     15.0      0.0      end: Point2D = np.array(params.end_point, dtype=np.float64)
   186         1          3.0      3.0      0.0      max_step_size: float = params.max_step_size
   187         1          3.0      3.0      0.0      neighborhood_size: float = params.neighborhood_size
   188         1          2.0      2.0      0.0      max_iter: int | None = params.max_iterations
   189                                           
   190                                               # Obstacles
   191         1        199.0    199.0      0.0      mp = Map(obstacles=params.wall_segments)
   192         1         16.0     16.0      0.0      logger.log_obstacles(mp.obstacles)
   193                                           
   194                                               # Initialize tree
   195         1       1418.0   1418.0      0.0      tree = RRTTree(start)
   196                                           
   197                                               # Main loop
   198         1          3.0      3.0      0.0      path = None
   199         1          2.0      2.0      0.0      iter = 0  # How many iterations of the algorithm we have done.
   200         1          2.0      2.0      0.0      end_node = None
   201         1          1.0      1.0      0.0      iter_found = None  # Iteration when the path was last found
   202                                           
   203       538       2498.0      4.6      0.0      while iter_found is None or iter < iter_found * 3:
   204       537     259520.0    483.3      1.1          random_point = np.random.rand(2) * np.array([2, 1])
   205       537     142821.0    266.0      0.6          closest_node = tree.nearest(random_point)
   206       537      71148.0    132.5      0.3          new_point = steer(closest_node.pos, random_point, max_step_size)
   207       537    1441259.0   2683.9      6.3          intersects_obs = mp.intersects_obstacle(closest_node.pos, new_point)
   208                                           
   209       537       1661.0      3.1      0.0          iter += 1
   210       537       1850.0      3.4      0.0          if max_iter is not None and iter >= max_iter:
   211                                                       print("Max iterations reached")
   212                                                       break
   213       537       3929.0      7.3      0.0          logger.set_time_sequence("iteration", iter)
   214       537       3716.0      6.9      0.0          logger.log_tree(tree, random_point, closest_node, new_point, intersects_obs)
   215                                           
   216       537       1388.0      2.6      0.0          if not intersects_obs:
   217                                                       # Searches for the point in a neighborhood that would result in the minimal cost (distance from start).
   218       450     115222.0    256.0      0.5              close_nodes = tree.in_neighborhood(new_point, neighborhood_size)
   219       450       3228.0      7.2      0.0              logger.log_rewiring(close_nodes, new_point, neighborhood_size)
   220                                           
   221       900   10857702.0  12064.1     47.8              min_node = min(
   222       900       2869.0      3.2      0.0                  filter(
   223       450       1500.0      3.3      0.0                      lambda node: not mp.intersects_obstacle(node.pos, new_point),
   224       450       2341.0      5.2      0.0                      close_nodes + [closest_node],
   225                                                           ),
   226       450       1241.0      2.8      0.0                  key=lambda node: node.cost + distance(node.pos, new_point),
   227                                                       )
   228                                           
   229       450      44521.0     98.9      0.2              cost = distance(min_node.pos, new_point)
   230       450       7519.0     16.7      0.0              added_node = Node(min_node, new_point, cost + min_node.cost)
   231       450      13882.0     30.8      0.1              tree.add_node(min_node, added_node)
   232                                           
   233                                                       # (Rewiring) Modifies nearby nodes that would be reached faster by going through `added_node`.
   234      3957      11907.0      3.0      0.1              for node in close_nodes:
   235      3507     380838.0    108.6      1.7                  cost = added_node.cost + distance(added_node.pos, node.pos)
   236      3507    9167009.0   2613.9     40.4                  if not mp.intersects_obstacle(new_point, node.pos) and cost < node.cost:
   237       316        744.0      2.4      0.0                      parent = node.parent
   238       316        757.0      2.4      0.0                      if parent is not None:
   239       316       1722.0      5.4      0.0                          parent.children.remove(node)
   240                                           
   241       316        711.0      2.2      0.0                          node.parent = added_node
   242       316      24230.0     76.7      0.1                          node.change_cost(cost - node.cost)
   243       316        892.0      2.8      0.0                          added_node.children.append(node)
   244                                           
   245       450      75289.0    167.3      0.3              if distance(new_point, end) < max_step_size and not mp.intersects_obstacle(new_point, end) and end_node is None:
   246         1        126.0    126.0      0.0                  end_node = Node(added_node, end, added_node.cost + distance(new_point, end))
   247         1         26.0     26.0      0.0                  tree.add_node(added_node, end_node)
   248         1          2.0      2.0      0.0                  iter_found = iter
   249                                           
   250       450       1398.0      3.1      0.0              if end_node:
   251                                                           # Reconstruct shortest path in tree
   252       325      38729.0    119.2      0.2                  path = path_to_root(end_node)
   253      8156      27756.0      3.4      0.1                  segments = [(path[i], path[i + 1]) for i in range(len(path) - 1)]
   254       325       2621.0      8.1      0.0                  logger.log_path(segments)
   255                                           
   256         1         23.0     23.0      0.0      return path

